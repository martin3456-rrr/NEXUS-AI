name: Nexus-AI CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly security scan

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: '21'
  NODE_VERSION: '18'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
      - uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Run SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn clean verify sonar:sonar -Dsonar.projectKey=nexus-ai -Dsonar.organization=${{ github.repository_owner }} -Dsonar.host.url=https://sonarcloud.io
      - name: Run OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7 -Dformats=HTML,JSON
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-dependency-check-report
          path: target/dependency-check-report.*

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ user-service, ai-analytics-service, blockchain-service, voting-service, notification-service, payment-service ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
      - uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Run unit tests
        run: mvn test -pl services/${{ matrix.service }} -am -Dtest.profile=unit -Dmaven.test.failure.ignore=false
      - uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Unit Tests - ${{ matrix.service }}
          path: 'services/${{ matrix.service }}/target/surefire-reports/*.xml'
          reporter: java-junit
          fail-on-error: true
      - uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/target/site/jacoco/jacoco.xml
          flags: ${{ matrix.service }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: nexus_test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379
      kafka:
        image: confluentinc/cp-kafka:7.4.1
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
      - uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Start Zookeeper
        run: |
          docker run -d --name zookeeper -p 2181:2181 \
            -e ZOOKEEPER_CLIENT_PORT=2181 \
            -e ZOOKEEPER_TICK_TIME=2000 \
            confluentinc/cp-zookeeper:7.4.1
          sleep 10
      - name: Run integration tests
        run: mvn verify -P integration-tests -Dspring.datasource.url=jdbc:postgresql://localhost:5432/nexus_test -Dspring.datasource.username=postgres -Dspring.datasource.password=test -Dspring.redis.host=localhost -Dspring.redis.port=6379 -Dspring.kafka.bootstrap-servers=localhost:9092
      - uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Integration Tests
          path: '**/target/failsafe-reports/*.xml'
          reporter: java-junit

  build-and-publish:
    name: Build, Scan & Publish Docker Images
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [ eureka-server, config-server, api-gateway, user-service, ai-analytics-service, blockchain-service, voting-service, notification-service, payment-service ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
      - uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      - name: Scan ${{ matrix.service }} Image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    environment:
      name: staging
      url: https://staging.nexus-ai.com
    steps:
      - name: Checkout K8s Config Repo
        uses: actions/checkout@v4
        with:
          repository: 'TwojaOrganizacja/nexus-ai-infra'
          token: ${{ secrets.INFRA_REPO_TOKEN }}
          path: 'infra'
      - name: Set up Kubeconfig
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_STAGING }}
      - name: Deploy with Helm
        run: |
          cd infra/helm/nexus-ai
          helm upgrade --install nexus-ai . \
            --namespace staging \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --wait

  run-performance-tests:
    name: Performance Tests (Staging)
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Run k6 Load Test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: ./e2e-tests/k6-script.js
          flags: --vus 50 --duration 30s
        env:
          K6_TARGET_URL: https://staging.nexus-ai.com

  deploy-production:
    name: Deploy to Production (Blue-Green + Canary)
    runs-on: ubuntu-latest
    needs: [run-performance-tests]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://nexus-ai.com
    steps:
      - name: Set up Kubeconfig (Production)
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_PRODUCTION }}
      - name: Deploy Blue-Green with Helm
        run: |
          cd infra/helm/nexus-ai
          helm upgrade --install nexus-ai . \
            --namespace production \
            --set image.tag=${{ github.sha }} \
            --wait
      - name: Canary Release (10% Traffic)
        run: |
          # Zaawansowana konfiguracja Ingress/Service Mesh wymagana
          helm upgrade nexus-ai-gateway --set traffic.canary.weight=10
      - name: Smoke Test Production Canary
        run: |
          curl -f https://nexus-ai.com/actuator/health
      - name: Promote Canary to 100%
        if: success()
        run: |
          helm upgrade nexus-ai-gateway --set traffic.canary.weight=100
